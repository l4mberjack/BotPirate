import telebot
import hashlib
from telebot import types
from secrets import secrets

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
token = secrets.get('BOT_API_TOKEN')
bot = telebot.TeleBot(token)
user_state = {}

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç",)
    btn2 = types.KeyboardButton("‚ùì FAQ")
    markup.add(btn1, btn2)
    return markup

def what_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    btn2 = types.KeyboardButton("–°—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—è")
    btn3 = types.KeyboardButton("\U0001F519 –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3)
    return markup

def hash_menu():
    markup = types.InlineKeyboardMarkup()
    btnMD5 = types.InlineKeyboardButton("MD5", callback_data='MD5')
    btnSHA1 = types.InlineKeyboardButton("SHA-1", callback_data='SHA1')
    markup.row(btnMD5, btnSHA1)
    btnSHA256 = types.InlineKeyboardButton("SHA-256", callback_data='SHA256')
    markup.row(btnSHA256)
    btnSHA224 = types.InlineKeyboardButton("SHA-224", callback_data='SHA224')
    btnSHA384 = types.InlineKeyboardButton("SHA-384", callback_data='SHA384')
    markup.row(btnSHA224, btnSHA384)
    btnSHA512 = types.InlineKeyboardButton("SHA-512", callback_data='SHA512')
    markup.row(btnSHA512)
    btnBlake2b = types.InlineKeyboardButton("blake2b", callback_data='blake2b')
    btnBlake2s = types.InlineKeyboardButton("blake2s", callback_data='blake2s')
    markup.row(btnBlake2b,btnBlake2s)
    return markup

def faq_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton("\U0001F519 –ù–∞–∑–∞–¥")
    markup.add(btn1)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ö–µ–ª–ø –¥–ª—è –≤—ã–¥–∞—á–∏ —Å–ø—Ä–∞–≤–∫–∏ –æ —Ö–µ—à–∞—Ö
@bot.message_handler(commands=['help'])
def help_command(message):
    file= open('./priv.docx','rb')
    bot.send_document(message.chat.id, file)


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, {0.first_name} üëã\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏\nüöÄ –°—Ç–∞—Ä—Ç - –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n‚ùì FAQ - —Å–ø—Ä–∞–≤–∫–∞ –æ –±–æ—Ç–µ".format(message.from_user),
        reply_markup=main_menu()
    )

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "video", "voice"])
def handle_text(message):
    if message.text == "üöÄ –°—Ç–∞—Ä—Ç":
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å:",
            reply_markup=what_menu()
        )

    elif message.text == "‚ùì FAQ":
        bot.send_message(
            message.chat.id,
              "–°–ø—Ä–∞–≤–∫–∞ –æ –±–æ—Ç–µ:\n–ü—Ä–∏–≤–µ—Ç!üëã\n"
                          "–Ø PirateHat_botüè¥‚Äç‚ò†Ô∏è- –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏–µ–π. –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ —Å–≤–æ—é –ø–æ–º–æ—â—å:\n\n"
                          "üîê<b>–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n\n"
                          "‚Ä¢ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Å—Ç–∏–∫–µ—Ä–∞, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è "
                          "(–≤—ã–±–µ—Ä–∏ –∞–ª–≥–æ—Ä–∏—Ç–º: MD5, SHA-1, SHA-256, SHA-224, SHA-384, SHA-512, blake2b, blake2s ‚Äì <i>–ø–æ–¥—Å–∫–∞–∑–∫–∞*</i> –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞). "
                          "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–ª—É—á–∏ –≥–æ—Ç–æ–≤—ã–π —Ö–µ—à!\n\n"
                          "‚Ä¢ –°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–∞ —Ö–µ—à–∞ ‚Äì –ø—Ä–æ–≤–µ—Ä—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö. –ó–∞–≥—Ä—É–∑–∏ –¥–≤–∞ —Ö–µ—à–∞, —è –ø—Ä–æ–≤–µ—Ä—é!\n\n"
                          "<i>*–ù–∞–ø–∏—à–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É.</i>\n\n"
                          "üèûÔ∏è<b>–°—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—è:</b>\n\n"
                          "‚Ä¢ –°–ø—Ä—è—Ç–∞—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µü§´ –≤ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏–ª–∏ –∞—É–¥–∏–æ –∑–∞–ø–∏—Å–∏. –ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äì –≥–æ—Ç–æ–≤–æ!\n\n"
                          "‚Ä¢ –ò–∑–≤–ª–µ—á—å —Å–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª, —è –∏–∑–≤–ª–µ–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!\n\n\n"
                          "‚ùóÔ∏èPirateHat_bot –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ - –±–æ—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏ –Ω–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. ‚ùóÔ∏è",
            parse_mode="HTML",reply_markup=faq_menu()
        )

    elif message.text == types.Sticker or message.text == types.Document or message.text == types.Audio\
            or message.text == types.Video or message.text == types.Voice:
        bot.send_message(message,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:")

    elif message.text == "\U0001F519 –ù–∞–∑–∞–¥":
        bot.send_message(
            message.chat.id,
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu()
        )

    elif message.text == "–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ":
        bot.send_message(
            message.chat.id, "–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup = hash_menu())


    elif message.text == "–°—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ–∏—è":
        bot.send_message(message.chat.id, "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å!")

    else:
        bot.send_message(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é:",
            reply_markup=main_menu()
        )

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline –∫–Ω–æ–ø–æ–∫ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    bot.send_message(callback.message.chat.id, "–°–∫–∏–Ω—å –º–Ω–µ –¥–∞–Ω–Ω—ã–µ, –∞ —è –∏—Ö –∑–∞—Ö–µ—à–∏—Ä—É—é üòé")
    if callback.data == 'MD5':
        user_state[callback.message.chat.id] = 'MD5'  #–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.register_next_step_handler(callback.message, hashingMd5)  #–û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    elif callback.data == 'SHA1':
        user_state[callback.message.chat.id] = 'SHA1'
        bot.register_next_step_handler(callback.message, hashingSha1)

    elif callback.data == 'SHA224':
        user_state[callback.message.chat.id] = 'SHA224'
        bot.register_next_step_handler(callback.message, hashingSha224)

    elif callback.data == "SHA256":
        user_state[callback.message.chat.id] = 'SHA256'
        bot.register_next_step_handler(callback.message, hashingSha256)

    elif callback.data == "SHA384":
        user_state[callback.message.chat.id] = 'SHA384'
        bot.register_next_step_handler(callback.message, hashingSha384)

    elif callback.data == "SHA512":
        user_state[callback.message.chat.id] = 'SHA512'
        bot.register_next_step_handler(callback.message, hashingSha512)

    elif callback.data == "blake2b":
        user_state[callback.message.chat.id] = 'blake2b'
        bot.register_next_step_handler(callback.message, hashingBlake2b)

    elif callback.data == "blake2s":
        user_state[callback.message.chat.id] = 'blake2s'
        bot.register_next_step_handler(callback.message, hashingBlake2s)


#MD5
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "voice"])
def hashingMd5(message):
    if message.content_type == 'text':
        user_message = message.text
        hasher = hashlib.md5()
        hasher.update(user_message.encode('utf-8'))  # –ö–æ–¥–∏—Ä—É–µ–º –≤ UTF-8 –ø–µ—Ä–µ–¥ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {user_message}\n–ï–≥–æ MD5 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'sticker':
        file_info = bot.get_file(message.sticker.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.md5()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.\n–ï–≥–æ MD5 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.md5()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n–ï–≥–æ SHA-1 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.md5()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n–ï–≥–æ SHA-1 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.md5()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï–≥–æ SHA-1 —Ö–µ—à: {hex_hash}")

    else:
        bot.send_message(message.chat.id,"–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
                                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)")

#SHA-1
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "voice"])
def hashingSha1(message):
    if message.content_type == 'text':
        user_message = message.text
        hasher = hashlib.sha1()
        hasher.update(user_message.encode('utf-8'))
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {user_message}\n–ï–≥–æ SHA-1 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'sticker':
        file_info = bot.get_file(message.sticker.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha1()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.\n–ï–≥–æ SHA-1 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha1()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n–ï–≥–æ SHA-1 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha1()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n–ï–≥–æ SHA-1 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha1()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï–≥–æ SHA-1 —Ö–µ—à: {hex_hash}")

    else:
        bot.send_message(
            message.chat.id,
            "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)"
        )

#SHA224
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "voice"])
def hashingSha224(message):
    if message.content_type == 'text':
        user_message = message.text
        hasher = hashlib.sha224()
        hasher.update(user_message.encode('utf-8'))
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {user_message}\n–ï–≥–æ SHA-224 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'sticker':
        file_info = bot.get_file(message.sticker.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha224()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.\n–ï–≥–æ SHA-224 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha224()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n–ï–≥–æ SHA-224 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha224()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n–ï–≥–æ SHA-224 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha224()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï–≥–æ SHA-224 —Ö–µ—à: {hex_hash}")

    else:
        bot.send_message(
            message.chat.id,
            "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)"
        )

#SHA256
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "voice"])
def hashingSha256(message):
    if message.content_type == 'text':
        user_message = message.text
        hasher = hashlib.sha256()
        hasher.update(user_message.encode('utf-8'))
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {user_message}\n–ï–≥–æ SHA-256 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'sticker':
        file_info = bot.get_file(message.sticker.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha256()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.\n–ï–≥–æ SHA-256 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha256()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n–ï–≥–æ SHA-256 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha256()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n–ï–≥–æ SHA-256 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha256()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï–≥–æ SHA-256 —Ö–µ—à: {hex_hash}")

    else:
        bot.send_message(
            message.chat.id,
            "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)"
        )

#SHA384
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "voice"])
def hashingSha384(message):
    if message.content_type == 'text':
        user_message = message.text
        hasher = hashlib.sha384()
        hasher.update(user_message.encode('utf-8'))
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {user_message}\n–ï–≥–æ SHA-384 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'sticker':
        file_info = bot.get_file(message.sticker.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha384()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.\n–ï–≥–æ SHA-384 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha384()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n–ï–≥–æ SHA-384 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha384()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n–ï–≥–æ SHA-384 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha384()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï–≥–æ SHA-384 —Ö–µ—à: {hex_hash}")

    else:
        bot.send_message(
            message.chat.id,
            "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)"
        )

#SHA512
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "voice"])
def hashingSha512(message):
    if message.content_type == 'text':
        user_message = message.text
        hasher = hashlib.sha512()
        hasher.update(user_message.encode('utf-8'))
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {user_message}\n–ï–≥–æ SHA-512 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'sticker':
        file_info = bot.get_file(message.sticker.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha512()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.\n–ï–≥–æ SHA-512 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha512()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n–ï–≥–æ SHA-512 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha512()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n–ï–≥–æ SHA-512 —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.sha512()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï–≥–æ SHA-512 —Ö–µ—à: {hex_hash}")

    else:
        bot.send_message(
            message.chat.id,
            "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)"
        )

#Blake2b
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "voice"])
def hashingBlake2b(message):
    if message.content_type == 'text':
        user_message = message.text
        hasher = hashlib.blake2b()
        hasher.update(user_message.encode('utf-8'))
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {user_message}\n–ï–≥–æ blake2b —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'sticker':
        file_info = bot.get_file(message.sticker.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.blake2b()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.\n–ï–≥–æ blake2b —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.blake2b()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n–ï–≥–æ blake2b —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.blake2b()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n–ï–≥–æ blake2b —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.blake2b()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï–≥–æ blake2b —Ö–µ—à: {hex_hash}")

    else:
        bot.send_message(
            message.chat.id,
            "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)"
        )

#Blake2s
@bot.message_handler(content_types=["text", "audio", "document", "sticker", "voice"])
def hashingBlake2s(message):
    if message.content_type == 'text':
        user_message = message.text
        hasher = hashlib.blake2s()
        hasher.update(user_message.encode('utf-8'))
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏: {user_message}\n–ï–≥–æ blake2s —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'sticker':
        file_info = bot.get_file(message.sticker.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.blake2s()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ç–∏–∫–µ—Ä.\n–ï–≥–æ blake2s —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.blake2s()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.\n–ï–≥–æ blake2s —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'audio':
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.blake2s()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª.\n–ï–≥–æ blake2s —Ö–µ—à: {hex_hash}")

    elif message.content_type == 'voice':
        file_info = bot.get_file(message.voice.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        hasher = hashlib.blake2s()
        hasher.update(downloaded_file)
        hex_hash = hasher.hexdigest()
        bot.reply_to(message, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ï–≥–æ blake2s —Ö–µ—à: {hex_hash}")

    else:
        bot.send_message(
            message.chat.id,
            "–Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–∫–µ—Ä–∞–º–∏ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ :)"
        )

bot.polling(none_stop=True)
